{"ast":null,"code":"var _jsxFileName = \"/home/dohelo/GitHub/FCC-JSCalculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react/cjs/react.development';\nimport './App.css';\nimport './react-components/CalculatorButton.js';\nimport CalculatorButton from './react-components/CalculatorButton.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // user stories data for requirements id's and text to display\n  let buttonsData = [{\n    textToShow: \"=\",\n    buttonId: \"equals\"\n  }, {\n    textToShow: \"/\",\n    buttonId: \"divide\"\n  }, {\n    textToShow: \"*\",\n    buttonId: \"multiply\"\n  }, {\n    textToShow: \"-\",\n    buttonId: \"substract\"\n  }, {\n    textToShow: \"+\",\n    buttonId: \"add\"\n  }, {\n    textToShow: \"C\",\n    buttonId: \"clear\"\n  }, {\n    textToShow: \".\",\n    buttonId: \"decimal\"\n  }, {\n    textToShow: \"0\",\n    buttonId: \"zero\"\n  }, {\n    textToShow: \"1\",\n    buttonId: \"one\"\n  }, {\n    textToShow: \"2\",\n    buttonId: \"two\"\n  }, {\n    textToShow: \"3\",\n    buttonId: \"three\"\n  }, {\n    textToShow: \"4\",\n    buttonId: \"four\"\n  }, {\n    textToShow: \"5\",\n    buttonId: \"five\"\n  }, {\n    textToShow: \"6\",\n    buttonId: \"six\"\n  }, {\n    textToShow: \"7\",\n    buttonId: \"seven\"\n  }, {\n    textToShow: \"8\",\n    buttonId: \"eight\"\n  }, {\n    textToShow: \"9\",\n    buttonId: \"nine\"\n  }]; // State for the calculator \n\n  let [CalculatorState, setCalculatorState] = useState({\n    display: \"0\"\n  });\n\n  function handleClickButton(buttonClicked) {\n    // ************************************************** HANDLE THE CLICK continue\n    // it receives the showText prop from button (\"1\", \"2\", \"3\", etc... \"+\", \"-\", \"*\", \"/\", \"C\") from the CalculatorButton component. \n\n    /* for now it print the string considering the restrictions:\n        - no multiple ceros or any cero to the left.\n        - No multiple decimals\n        - No two operations symbols together.\n          (CONSIDER THAT - (MINUS for negative numbers) CAN BE LEGAL ONE TIME, example: 2*-3 = -6, but not 2*--3 or 2-* or 2+-3, so can be 2*-3 or 4/-2)\n    */\n    let regex0to9 = /[0-9]/;\n    let regexOperations = /[-+*\\/]/;\n\n    if (CalculatorState.display === \"0\" && regex0to9.test(buttonClicked)) {\n      setCalculatorState({\n        display: buttonClicked\n      });\n    } else if (buttonClicked === '-' && CalculatorState.display[CalculatorState.display.length - 1] != ('-' && '+')) {} else if (regex0to9.test(buttonClicked) || regexOperations.test(buttonClicked) && !regexOperations.test(CalculatorState.display[CalculatorState.display.length - 1])) {\n      setCalculatorState({\n        display: CalculatorState.display + buttonClicked\n      });\n    } else if (regexOperations.test(CalculatorState.display[CalculatorState.display.length - 1])) {\n      setCalculatorState({\n        display: CalculatorState.display.slice(0, -1) + buttonClicked\n      });\n    } else if (buttonClicked === \"C\") {\n      setCalculatorState({\n        display: \"0\"\n      });\n    } else if (buttonClicked === '.' && !/./.test(CalculatorState.display)) {\n      setCalculatorState({\n        display: CalculatorState.display + buttonClicked\n      });\n    } else if (buttonClicked === '=') {\n      setCalculatorState({\n        display: eval(CalculatorState.display)\n      });\n    }\n  } // generate JSX for all buttons from buttonsData. 17 total\n\n\n  let renderButtons = buttonsData.map(item => /*#__PURE__*/_jsxDEV(CalculatorButton, {\n    showText: item.textToShow,\n    idButton: item.buttonId,\n    clickOnButton: handleClickButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 49\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"display\",\n          children: CalculatorState.display\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), renderButtons]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"NH3vDToXrQUU5JEyfH3rALuaIlg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dohelo/GitHub/FCC-JSCalculator/src/App.js"],"names":["useState","CalculatorButton","App","buttonsData","textToShow","buttonId","CalculatorState","setCalculatorState","display","handleClickButton","buttonClicked","regex0to9","regexOperations","test","length","slice","eval","renderButtons","map","item"],"mappings":"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","sourcesContent":["import { useState } from 'react/cjs/react.development';\nimport './App.css';\nimport './react-components/CalculatorButton.js';\nimport CalculatorButton from './react-components/CalculatorButton.js';\n\nfunction App() {\n  // user stories data for requirements id's and text to display\n  let buttonsData = [\n    { textToShow: \"=\", buttonId: \"equals\" },\n    { textToShow: \"/\", buttonId: \"divide\" },\n    { textToShow: \"*\", buttonId: \"multiply\" },\n    { textToShow: \"-\", buttonId: \"substract\" },\n    { textToShow: \"+\", buttonId: \"add\" },\n    { textToShow: \"C\", buttonId: \"clear\" },\n    { textToShow: \".\", buttonId: \"decimal\" },\n    { textToShow: \"0\", buttonId: \"zero\" },\n    { textToShow: \"1\", buttonId: \"one\" },\n    { textToShow: \"2\", buttonId: \"two\" },\n    { textToShow: \"3\", buttonId: \"three\" },\n    { textToShow: \"4\", buttonId: \"four\" },\n    { textToShow: \"5\", buttonId: \"five\" },\n    { textToShow: \"6\", buttonId: \"six\" },\n    { textToShow: \"7\", buttonId: \"seven\" },\n    { textToShow: \"8\", buttonId: \"eight\" },\n    { textToShow: \"9\", buttonId: \"nine\" }\n  ];\n\n  // State for the calculator \n  let [CalculatorState, setCalculatorState] = useState(\n    {\n      display: \"0\"\n    }\n  );\n\n  function handleClickButton(buttonClicked) {\n    // ************************************************** HANDLE THE CLICK continue\n    // it receives the showText prop from button (\"1\", \"2\", \"3\", etc... \"+\", \"-\", \"*\", \"/\", \"C\") from the CalculatorButton component. \n    /* for now it print the string considering the restrictions:\n        - no multiple ceros or any cero to the left.\n        - No multiple decimals\n        - No two operations symbols together.\n          (CONSIDER THAT - (MINUS for negative numbers) CAN BE LEGAL ONE TIME, example: 2*-3 = -6, but not 2*--3 or 2-* or 2+-3, so can be 2*-3 or 4/-2)\n    */\n    let regex0to9 = /[0-9]/;\n    let regexOperations = /[-+*\\/]/;\n    if (CalculatorState.display === \"0\" && regex0to9.test(buttonClicked)) {\n      setCalculatorState({ display: buttonClicked });\n      \n    } else if (buttonClicked === '-' && CalculatorState.display[CalculatorState.display.length-1] != ('-' && '+')) {\n        \n      }\n      else if (regex0to9.test(buttonClicked) || (regexOperations.test(buttonClicked) && !regexOperations.test(CalculatorState.display[CalculatorState.display.length-1]))) { \n          setCalculatorState({ display: CalculatorState.display + buttonClicked });\n        } else if (regexOperations.test(CalculatorState.display[CalculatorState.display.length-1])) {\n          setCalculatorState({ display: CalculatorState.display.slice(0, -1) + buttonClicked });\n          } else if (buttonClicked === \"C\") {\n              setCalculatorState({ display: \"0\" });\n            } else if (buttonClicked === '.' && !/./.test(CalculatorState.display)) {\n              setCalculatorState({ display: CalculatorState.display + buttonClicked });\n              } else if (buttonClicked === '=') {\n                setCalculatorState({ display: (eval(CalculatorState.display)) });\n              }\n  }\n\n  // generate JSX for all buttons from buttonsData. 17 total\n  let renderButtons = buttonsData.map(item => ( <CalculatorButton showText={item.textToShow} idButton={item.buttonId} clickOnButton={handleClickButton} /> ));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"buttonsContainer\">\n          <div id=\"display\">\n            {CalculatorState.display}\n          </div>\n          {renderButtons}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}